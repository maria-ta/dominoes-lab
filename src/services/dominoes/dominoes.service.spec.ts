import { Test, TestingModule } from '@nestjs/testing';
import { DominoesService } from './dominoes.service';
import { HelperService } from '../helper/helper.service';
import { GeneratorService } from '../generator/generator.service';

describe('DominoesService', () => {
  let service: DominoesService;

  let generatorService: GeneratorService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [DominoesService, HelperService, GeneratorService],
    }).compile();

    service = module.get<DominoesService>(DominoesService);
    generatorService = module.get<GeneratorService>(GeneratorService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  describe('#solveProblem', () => {
    it('should solve the problem when valid data provided', () => {
      const validData = [
        [4, 6, 0, 1, 1, 1, 1, 6],
        [0, 5, 6, 0, 6, 2, 5, 1],
        [4, 3, 3, 4, 5, 4, 0, 4],
        [6, 5, 3, 2, 5, 4, 0, 2],
        [6, 3, 6, 3, 0, 1, 2, 4],
        [0, 3, 1, 5, 2, 3, 2, 4],
        [5, 1, 2, 0, 3, 2, 6, 5],
      ];
      const expectedResult = [
        ['l', 'r', 'l', 'r', 'l', 'r', 'l', 'r'],
        ['t', 'l', 'r', 'l', 'r', 'l', 'r', 't'],
        ['b', 't', 'l', 'r', 't', 't', 't', 'b'],
        ['t', 'b', 't', 't', 'b', 'b', 'b', 't'],
        ['b', 't', 'b', 'b', 't', 't', 't', 'b'],
        ['t', 'b', 'l', 'r', 'b', 'b', 'b', 't'],
        ['b', 'l', 'r', 'l', 'r', 'l', 'r', 'b'],
      ];

      const result = service.solveProblem(validData);
      expect(result).toEqual(expectedResult);
    });
    it('should not solve the problem when invalid data provided', () => {
      const validData = [
        [4, 0, 0, 0, 0, 0, 0, 0],
        [0, 4, 4, 0, 0, 1, 6, 3],
        [2, 4, 4, 1, 1, 3, 1, 5],

        [2, 5, 0, 0, 0, 0, 0, 0],

        [5, 3, 3, 6, 4, 1, 3, 5],
        [1, 4, 1, 4, 5, 6, 6, 5],
        [6, 6, 3, 0, 3, 3, 6, 2],
      ];

      try {
        service.solveProblem(validData);
      } catch (e) {
        expect(e).toBeTruthy();
      }
    });

    it('should solve 10/10 auto generated problems', () => {
      const triesCount = 10;
      for (let i = 0; i < triesCount; i++) {
        const autoGeneratedProblem = generatorService.generateValidData();

        service.solveProblem(autoGeneratedProblem.numbers);
        expect(true).toBe(true);
      }
    });
  });
});
