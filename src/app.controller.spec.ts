import { Test, TestingModule } from '@nestjs/testing';
import { AppController } from './app.controller';
import { GeneratorService } from './services/generator/generator.service';
import { DominoesService } from './services/dominoes/dominoes.service';
import { TableValidatorService } from './services/table-validator/table-validator.service';
import TABLE_CONSTANTS from './constants/table.const';
import { ProducerService } from './services/producer/producer.service';

describe('AppController', () => {
  let appController: AppController;

  let producerServiceMock;
  let generatorServiceMock;
  let tableValidatorServiceMock;

  beforeEach(async () => {
    producerServiceMock = {
      solve: jest.fn(),
    };
    generatorServiceMock = {
      generateValidData: jest.fn(),
    };
    tableValidatorServiceMock = {
      checkTable: jest.fn(),
    };
    const app: TestingModule = await Test.createTestingModule({
      controllers: [AppController],
      providers: [
        { provide: ProducerService, useValue: producerServiceMock },
        { provide: GeneratorService, useValue: generatorServiceMock },
        { provide: TableValidatorService, useValue: tableValidatorServiceMock },
      ],
    }).compile();

    appController = app.get<AppController>(AppController);
  });

  describe('#getHealth', () => {
    it('should return true', () => {
      expect(appController.getHealth()).toBe(true);
    });
  });

  describe('#getConditions', () => {
    it('should return TABLE_CONSTANTS', () => {
      expect(appController.getConditions()).toBe(TABLE_CONSTANTS);
    });
  });

  describe('#generate', () => {
    it('should return data, generated by GeneratorService', () => {
      const expectedValue = { numbers: [], positions: [] };
      generatorServiceMock.generateValidData.mockReturnValue(expectedValue);

      expect(appController.generate()).toEqual(expectedValue);
    });
  });

  describe('#solve', () => {
    it('should check table', () => {
      appController.solve({ initialTable: [] });
      expect(tableValidatorServiceMock.checkTable).toHaveBeenCalled();
    });

    it('should solve the problem', () => {
      const initialTableDto = { initialTable: [] };

      appController.solve(initialTableDto);

      expect(producerServiceMock.solve).toHaveBeenCalledWith(initialTableDto);
    });
  });
});
