import {
  Body,
  Controller,
  Get,
  HttpStatus,
  Post,
  UseFilters,
  UseInterceptors,
} from '@nestjs/common';
import { DefaultFilter } from './filters/default.filter';
import { ErrorHandlingInterceptor } from './interceptors/error-handling.interceptor';
import { TableValidatorService } from './services/table-validator/table-validator.service';
import TABLE_CONSTANTS from './constants/table.const';
import { AutoGeneratedSolution } from './interfaces/auto-generated-solution';
import { GeneratorService } from './services/generator/generator.service';
import { InitialTableDto } from './dto/initial-table.dto';
import { TableConstantsDto } from './dto/table-constants.dto';
import { ApiResponse } from '@nestjs/swagger';
import { ProducerService } from './services/producer/producer.service';

@Controller()
@UseInterceptors(ErrorHandlingInterceptor)
@UseFilters(new DefaultFilter())
export class AppController {
  constructor(
    private readonly producerService: ProducerService,
    private readonly tableValidatorService: TableValidatorService,
    private readonly generatorService: GeneratorService,
  ) {}

  @Get('health')
  getHealth(): boolean {
    return true;
  }

  @Get('conditions')
  getConditions(): TableConstantsDto {
    return TABLE_CONSTANTS;
  }

  @Get('generate')
  generate(): AutoGeneratedSolution {
    return this.generatorService.generateValidData();
  }

  @Post('solve')
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: 'Incorrect initial table',
  })
  solve(@Body() initialTableDto: InitialTableDto): InitialTableDto {
    const initialTable = initialTableDto.initialTable;
    this.tableValidatorService.checkTable(initialTable);
    this.producerService.solve(initialTableDto);
    return initialTableDto;
  }
}
